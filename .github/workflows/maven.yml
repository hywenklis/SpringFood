# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven - Build, Test and Deploy

# configuramos para rodar apenas quando houver um push na master
on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  # `build` é o nome do job
  tests:
    # nome para exibir no repositório
    name: Test

    # utilizamos uma instância do ubuntu como runner
    runs-on: ubuntu-latest
    steps:
      # utilizamos a action checkout para fazer o git clone no runner
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # utilizamos a action setup-java para configurar a versão necessária do JDK
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17

      # aqui podemos configurar um cache para cachear as dependências do projeto,
      # isso vai permitir que as próximas execuções do workflow sejam mais rápidas
      # visto que as dependências já estarão disponibilizadas para o runner
      # nota: utilizamos um hash do arquivo POM.xml, então quando o alterarmos,
      # as dependências são baixadas novamente
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      #Executando o docker-compose da aplicação
      - name: Docker compose
        run: docker-compose up -d

      # aqui apenas definimos o commando para executar no runner
      - name: Maven Test
        run: mvn test

  # Excutando SonarCloud
  sonar:
    needs: tests
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      - name: Docker compose
        run: docker-compose up -d
      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=hywenklis_SpringFood

      # aqui criamos a pasta para armazenar o relatório dos testes
      - run: mkdir coverage-report && cp -r target/site/jacoco/* coverage-report

      # aqui utilizamos um action para registrar o resultado do teste no nosso workflow,
      # caso ocorra alguma falha em algum teste, ficará explicito nos logs de execução aba Actions
      - name: Publish Test Report
        if: ${{ always() }}
        uses: scacap/action-surefire-report@v1

      # aqui utilizamos um action para fazer a publicação do relatório de testes,
      # esse relatório pode ser baixado nos detalhes de execução do workflow
      - uses: actions/upload-artifact@v2
        with:
          name: Test Coverage Report
          path: coverage-report

  #Build's job
  build:
    #Depends on sonar's job
    needs: sonar
    name: Build
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 17
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload JAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v3
        with:
          #Set artifact name
          name: artifact
          #From this path
          path: target/springfood-api-0.0.1-SNAPSHOT.jar